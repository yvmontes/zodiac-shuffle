{"version":3,"sources":["components/ImageCard/ImageCard.js","components/Header/Header.js","components/Wrapper/Wrapper.js","components/ScoreBar/ScoreBar.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","props","react_default","a","createElement","className","onClick","imageClick","src","image","alt","id","width","height","Header","title","desc","rules","Wrapper","children","ScoreBar","score","App","state","images","clickedImages","shuffleCards","array","sort","b","Math","random","event","console","log","target","currentImage","_this","indexOf","alert","setState","concat","_this2","this","components_Header_Header","components_ScoreBar_ScoreBar","components_Wrapper_Wrapper","map","components_ImageCard_ImageCard","key","imageURL","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"67BAWeA,SARG,SAAAC,GAAK,OACnBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAASL,EAAMM,YACjCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAMQ,MAAOC,IAAKT,EAAMU,GAAIN,UAAU,iBAAiBO,MAAM,OAAOC,OAAO,aCIlFC,SAPA,SAAAb,GAAK,OAChBC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6BACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAyBJ,EAAMc,OAC7Cb,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAoBJ,EAAMe,KAAKd,EAAAC,EAAAC,cAAA,WAAMH,EAAMgB,UCMjDC,SATC,SAAAjB,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVJ,EAAMkB,aCGJC,SANE,SAAAnB,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,oBAAYH,EAAMoB,iBC8EXC,oNA1EXC,MAAQ,CACJC,SACAC,cAAe,GACfJ,MAAO,KAIXK,aAAe,SAAAC,GAEX,OADAA,EAAMC,KAAK,SAACzB,EAAG0B,GAAJ,MAAU,GAAMC,KAAKC,WACzBJ,KAIXpB,WAAa,SAAAyB,GACTC,QAAQC,IAAIF,EAAMG,QAClB,IAAMC,EAAeJ,EAAMG,OAAOzB,IACX2B,EAAKd,MAAME,cAAca,QAAQF,IAAiB,GAIrEG,MAAM,aACNF,EAAKG,SAAS,CACVhB,OAAQa,EAAKX,aAAaF,GAC1BC,cAAe,GACfJ,MAAO,KAIXgB,EAAKG,SACD,CACIhB,OAAQa,EAAKX,aAAaF,GAC1BC,cAAeY,EAAKd,MAAME,cAAcgB,OAAOL,GAC/Cf,MAAOgB,EAAKd,MAAMF,MAAQ,GAG9B,WAC6B,KAArBgB,EAAKd,MAAMF,QACXkB,MAAM,YACNF,EAAKG,SAAS,CACVhB,OAAQa,EAAKX,aAAaF,GAC1BC,cAAe,GACfJ,MAAO,gFAQtB,IAAAqB,EAAAC,KACL,OACIzC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACwC,EAAD,CACI7B,MAAM,iBACNC,KAAK,oBACLC,MAAM,kFAEVf,EAAAC,EAAAC,cAACyC,EAAD,CAAUxB,MAAOsB,KAAKpB,MAAMF,QAC5BnB,EAAAC,EAAAC,cAAC0C,EAAD,KAEKH,KAAKpB,MAAMC,OAAOuB,IAAI,SAAAtC,GAAK,OACxBP,EAAAC,EAAAC,cAAC4C,EAAD,CACIzC,WAAYmC,EAAKnC,WACjBI,GAAIF,EAAME,GACVsC,IAAKxC,EAAME,GACXF,MAAOA,EAAMyC,sBAlEvBC,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.647375c6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./ImageCard.css\";\n\nconst ImageCard = props => (\n    <div className=\"card\" onClick={props.imageClick}>\n        <div className=\"img-container\">\n            <img src={props.image} alt={props.id} className=\"img-responsive\" width=\"100%\" height=\"100%\"/>\n        </div>\n    </div>\n);\n\nexport default ImageCard;","import React from \"react\";\nimport \"./Header.css\";\n\nconst Header = props => (\n    <header className=\"jumbotron jumbotron-fluid\">\n        <h1 className=\"display-3 text-center\">{props.title}</h1>\n        <p className=\"lead text-center\">{props.desc}<br/>{props.rules}</p>\n    </header>\n);\n\nexport default Header;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => (\n    <div className=\"container\">\n        <div className=\"wrapper\">\n            {props.children}\n        </div>\n    </div>\n);\n\n\nexport default Wrapper;","import React from \"react\";\nimport \"./ScoreBar.css\";\n\nconst ScoreBar = props => (\n    <div className=\"score-bar text-center\">\n        <h3>Score: {props.score}</h3>\n    </div>\n);\n\nexport default ScoreBar;","import React, { Component } from \"react\";\nimport ImageCard from \"./components/ImageCard\";\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\nimport ScoreBar from \"./components/ScoreBar\";\nimport images from \"./images.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n    state = {\n        images,\n        clickedImages: [],\n        score: 0\n    };\n\n    // method for randomly sorting the images array\n    shuffleCards = array => {\n        array.sort((a, b) => 0.5 - Math.random());\n        return array;\n    };\n\n    // method for handling image click events\n    imageClick = event => {\n        console.log(event.target);\n        const currentImage = event.target.alt;\n        const alreadyClicked = this.state.clickedImages.indexOf(currentImage) > -1;\n\n        // if you click on an image more than once, you lose and the score resets to 0, the clickedImages are reset, and the images reshuffle\n        if (alreadyClicked) {\n            alert(\"You lost!\");\n            this.setState({\n                images: this.shuffleCards(images),\n                clickedImages: [],\n                score: 0\n            });\n        } else {\n            // else you score a point, the selected image is stored in the clickedImages array, and the images reshuffle\n            this.setState(\n                {\n                    images: this.shuffleCards(images),\n                    clickedImages: this.state.clickedImages.concat(currentImage),\n                    score: this.state.score + 1\n                },\n                // function that's called when you win the game; resets values\n                () => {\n                    if (this.state.score === 12) {\n                        alert(\"You win!\");\n                        this.setState({\n                            images: this.shuffleCards(images),\n                            clickedImages: [],\n                            score: 0\n                        });\n                    }\n                }\n            );\n        }\n    };\n\n    render() {\n        return (\n            <div> \n                <Header \n                    title=\"ZODIAC SHUFFLE\" \n                    desc=\"Art by Tati Moons\"\n                    rules=\"Click on an image to earn points, but don't click on an image more than once.\" \n                />\n                <ScoreBar score={this.state.score} />\n                <Wrapper>\n                    {/* maps over this.state.images and renders an ImageCard component for each image object */}\n                    {this.state.images.map(image => (\n                        <ImageCard \n                            imageClick={this.imageClick}\n                            id={image.id}\n                            key={image.id}\n                            image={image.imageURL}\n                        />\n                    ))}\n                </Wrapper>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}